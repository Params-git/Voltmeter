
3_phase_voltmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000608  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080009c  0080009c  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ab  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082e  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071d  00000000  00000000  000020bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fb  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080c  00000000  00000000  00002d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 39       	cpi	r26, 0x9C	; 156
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e9       	ldi	r26, 0x9C	; 156
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 3b       	cpi	r26, 0xB6	; 182
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1f d1       	rcall	.+574    	; 0x298 <main>
  5a:	d4 c2       	rjmp	.+1448   	; 0x604 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcd_enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5e:	88 b3       	in	r24, 0x18	; 24
  60:	80 61       	ori	r24, 0x10	; 16
  62:	88 bb       	out	0x18, r24	; 24
  64:	00 c0       	rjmp	.+0      	; 0x66 <lcd_enable+0x8>
  66:	00 c0       	rjmp	.+0      	; 0x68 <lcd_enable+0xa>
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	8f 7e       	andi	r24, 0xEF	; 239
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	08 95       	ret

00000070 <lcd_out>:
  70:	98 b3       	in	r25, 0x18	; 24
  72:	90 7f       	andi	r25, 0xF0	; 240
  74:	98 bb       	out	0x18, r25	; 24
  76:	98 b3       	in	r25, 0x18	; 24
  78:	82 95       	swap	r24
  7a:	8f 70       	andi	r24, 0x0F	; 15
  7c:	98 2b       	or	r25, r24
  7e:	98 bb       	out	0x18, r25	; 24
  80:	ee df       	rcall	.-36     	; 0x5e <lcd_enable>
  82:	08 95       	ret

00000084 <lcd_data>:
  84:	cf 93       	push	r28
  86:	c8 2f       	mov	r28, r24
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	8c 2f       	mov	r24, r28
  90:	ef df       	rcall	.-34     	; 0x70 <lcd_out>
  92:	8c 2f       	mov	r24, r28
  94:	82 95       	swap	r24
  96:	80 7f       	andi	r24, 0xF0	; 240
  98:	eb df       	rcall	.-42     	; 0x70 <lcd_out>
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_data+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_data+0x1e>
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <lcd_command>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	8c 2f       	mov	r24, r28
  b2:	de df       	rcall	.-68     	; 0x70 <lcd_out>
  b4:	8c 2f       	mov	r24, r28
  b6:	82 95       	swap	r24
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	da df       	rcall	.-76     	; 0x70 <lcd_out>
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_command+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_command+0x1e>
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_clear>:
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	ed df       	rcall	.-38     	; 0xa6 <lcd_command>
  cc:	83 e3       	ldi	r24, 0x33	; 51
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_clear+0x8>
  d4:	08 95       	ret

000000d6 <lcd_init>:
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	8f 63       	ori	r24, 0x3F	; 63
  da:	87 bb       	out	0x17, r24	; 23
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	80 7c       	andi	r24, 0xC0	; 192
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	95 e3       	ldi	r25, 0x35	; 53
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_init+0x10>
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_init+0x16>
  ec:	00 00       	nop
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	bf df       	rcall	.-130    	; 0x70 <lcd_out>
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	91 e1       	ldi	r25, 0x11	; 17
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_init+0x20>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_init+0x26>
  fc:	00 00       	nop
  fe:	af df       	rcall	.-162    	; 0x5e <lcd_enable>
 100:	89 e9       	ldi	r24, 0x99	; 153
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x34>
 10a:	a9 df       	rcall	.-174    	; 0x5e <lcd_enable>
 10c:	89 e9       	ldi	r24, 0x99	; 153
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_init+0x3a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_init+0x40>
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	ab df       	rcall	.-170    	; 0x70 <lcd_out>
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	91 e1       	ldi	r25, 0x11	; 17
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_init+0x48>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcd_init+0x4e>
 124:	00 00       	nop
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	be df       	rcall	.-132    	; 0xa6 <lcd_command>
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	bc df       	rcall	.-136    	; 0xa6 <lcd_command>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	ba df       	rcall	.-140    	; 0xa6 <lcd_command>
 132:	ca df       	rcall	.-108    	; 0xc8 <lcd_clear>
 134:	08 95       	ret

00000136 <lcd_setcursor>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;

	switch (y)
 136:	62 30       	cpi	r22, 0x02	; 2
 138:	59 f0       	breq	.+22     	; 0x150 <lcd_setcursor+0x1a>
 13a:	18 f4       	brcc	.+6      	; 0x142 <lcd_setcursor+0xc>
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	31 f0       	breq	.+12     	; 0x14c <lcd_setcursor+0x16>
 140:	08 95       	ret
 142:	63 30       	cpi	r22, 0x03	; 3
 144:	39 f0       	breq	.+14     	; 0x154 <lcd_setcursor+0x1e>
 146:	64 30       	cpi	r22, 0x04	; 4
 148:	39 f0       	breq	.+14     	; 0x158 <lcd_setcursor+0x22>
 14a:	08 95       	ret
	{
	case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
 14c:	80 58       	subi	r24, 0x80	; 128
		break;
 14e:	05 c0       	rjmp	.+10     	; 0x15a <lcd_setcursor+0x24>

	case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
 150:	80 54       	subi	r24, 0x40	; 64
		break;
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_setcursor+0x24>

	case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
 154:	80 57       	subi	r24, 0x70	; 112
		break;
 156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_setcursor+0x24>

	case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
 158:	80 53       	subi	r24, 0x30	; 48

	default:
		return;                               // für den Fall einer falschen Zeile
	}

	lcd_command( data );
 15a:	a5 df       	rcall	.-182    	; 0xa6 <lcd_command>
 15c:	08 95       	ret

0000015e <lcd_string>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
	while( *data != '\0' )
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_string+0xc>
		lcd_data( *data++ );
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	8d df       	rcall	.-230    	; 0x84 <lcd_data>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
 16a:	88 81       	ld	r24, Y
 16c:	81 11       	cpse	r24, r1
 16e:	fb cf       	rjmp	.-10     	; 0x166 <lcd_string+0x8>
		lcd_data( *data++ );
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <adc_init>:
float vm = 0;

void adc_init()
{
	//AREF = AVcc
	ADMUX = (1<<REFS0); //for enabling reference voltage 
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);  //ADC enable and set prescaler
 17a:	87 e8       	ldi	r24, 0x87	; 135
 17c:	86 b9       	out	0x06, r24	; 6
 17e:	08 95       	ret

00000180 <adc_read>:
}

uint16_t adc_read(uint8_t ch){
	
	ch &= 0b00000111; 
 180:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;  //1111 1000 0xF8 
 182:	97 b1       	in	r25, 0x07	; 7
 184:	98 7f       	andi	r25, 0xF8	; 248
 186:	89 2b       	or	r24, r25
 188:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 18a:	86 b1       	in	r24, 0x06	; 6
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1<<ADSC)); // wait until conversion  completes; ADSC=0 means Complete
 190:	36 99       	sbic	0x06, 6	; 6
 192:	fe cf       	rjmp	.-4      	; 0x190 <adc_read+0x10>
	
	return (ADCW);
 194:	84 b1       	in	r24, 0x04	; 4
 196:	95 b1       	in	r25, 0x05	; 5
}
 198:	08 95       	ret

0000019a <adc_phase1>:


int adc_phase1(int ch)
{
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	c8 5c       	subi	r28, 0xC8	; 200
 1aa:	d1 09       	sbc	r29, r1
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	f8 2e       	mov	r15, r24
	uint16_t adc_int[100];
	int i = 0, Max = 0;
	
	for (i = 0; i <= 79; i++) {
 1b8:	00 e0       	ldi	r16, 0x00	; 0
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	0f c0       	rjmp	.+30     	; 0x1dc <adc_phase1+0x42>
		adc_int[i] = adc_read(ch);      // read adc value at PORTC.0
 1be:	8f 2d       	mov	r24, r15
 1c0:	df df       	rcall	.-66     	; 0x180 <adc_read>
 1c2:	f8 01       	movw	r30, r16
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	2c 0f       	add	r18, r28
 1ce:	3d 1f       	adc	r19, r29
 1d0:	e2 0f       	add	r30, r18
 1d2:	f3 1f       	adc	r31, r19
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24
int adc_phase1(int ch)
{
	uint16_t adc_int[100];
	int i = 0, Max = 0;
	
	for (i = 0; i <= 79; i++) {
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	00 35       	cpi	r16, 0x50	; 80
 1de:	11 05       	cpc	r17, r1
 1e0:	74 f3       	brlt	.-36     	; 0x1be <adc_phase1+0x24>
		adc_int[i] = adc_read(ch);      // read adc value at PORTC.0
	}
	
	Max = adc_int[0];
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
	
	for (i = 0; i <= 80; i++) {
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	11 c0       	rjmp	.+34     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		if (Max < adc_int[i])
 1ec:	f9 01       	movw	r30, r18
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	4c 0f       	add	r20, r28
 1f8:	5d 1f       	adc	r21, r29
 1fa:	e4 0f       	add	r30, r20
 1fc:	f5 1f       	adc	r31, r21
 1fe:	40 81       	ld	r20, Z
 200:	51 81       	ldd	r21, Z+1	; 0x01
 202:	84 17       	cp	r24, r20
 204:	95 07       	cpc	r25, r21
 206:	08 f4       	brcc	.+2      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
		Max = adc_int[i];
 208:	ca 01       	movw	r24, r20
		adc_int[i] = adc_read(ch);      // read adc value at PORTC.0
	}
	
	Max = adc_int[0];
	
	for (i = 0; i <= 80; i++) {
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	21 35       	cpi	r18, 0x51	; 81
 210:	31 05       	cpc	r19, r1
 212:	64 f3       	brlt	.-40     	; 0x1ec <adc_phase1+0x52>
		if (Max < adc_int[i])
		Max = adc_int[i];
	}
	
	adc = Max;
 214:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <adc+0x1>
 218:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <adc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 21c:	4a e0       	ldi	r20, 0x0A	; 10
 21e:	62 ea       	ldi	r22, 0xA2	; 162
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	bd d1       	rcall	.+890    	; 0x59e <__itoa_ncheck>
 224:	5f ef       	ldi	r21, 0xFF	; 255
 226:	89 e6       	ldi	r24, 0x69	; 105
 228:	98 e1       	ldi	r25, 0x18	; 24
 22a:	51 50       	subi	r21, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 234:	00 00       	nop
	itoa(Max, buf, 10);
	
	_delay_ms(1000);
	
	vm = (float)(adc * 0.2763637188); // 283/1024 = 0.2763637188
 236:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <adc>
 23a:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <adc+0x1>
 23e:	07 2e       	mov	r0, r23
 240:	00 0c       	add	r0, r0
 242:	88 0b       	sbc	r24, r24
 244:	99 0b       	sbc	r25, r25
 246:	bc d0       	rcall	.+376    	; 0x3c0 <__floatsisf>
 248:	2c e8       	ldi	r18, 0x8C	; 140
 24a:	3f e7       	ldi	r19, 0x7F	; 127
 24c:	4d e8       	ldi	r20, 0x8D	; 141
 24e:	5e e3       	ldi	r21, 0x3E	; 62
 250:	1b d1       	rcall	.+566    	; 0x488 <__mulsf3>
 252:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__data_end>
 256:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__data_end+0x1>
 25a:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end+0x2>
 25e:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0x3>
	adc = (int)vm;
 262:	7b d0       	rcall	.+246    	; 0x35a <__fixsfsi>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <adc+0x1>
 26c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <adc>
 270:	4a e0       	ldi	r20, 0x0A	; 10
 272:	62 ea       	ldi	r22, 0xA2	; 162
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	93 d1       	rcall	.+806    	; 0x59e <__itoa_ncheck>
	
	itoa(adc, buf, 10);
	
	return *buf;
 278:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <buf>
	
}
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	c8 53       	subi	r28, 0x38	; 56
 280:	df 4f       	sbci	r29, 0xFF	; 255
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	08 95       	ret

00000298 <main>:


int main(void)
{	
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
	lcd_init();
 29c:	1c df       	rcall	.-456    	; 0xd6 <lcd_init>
	lcd_setcursor(0, 1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	49 df       	rcall	.-366    	; 0x136 <lcd_setcursor>
	lcd_string("AC VOLTMETER..");
 2a4:	80 e6       	ldi	r24, 0x60	; 96
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	5a df       	rcall	.-332    	; 0x15e <lcd_string>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	84 e3       	ldi	r24, 0x34	; 52
 2ae:	9c e0       	ldi	r25, 0x0C	; 12
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x18>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x22>
 2ba:	00 00       	nop
	_delay_ms(500);
	lcd_clear();
 2bc:	05 df       	rcall	.-502    	; 0xc8 <lcd_clear>
	lcd_string("intialising ADC..");
 2be:	8f e6       	ldi	r24, 0x6F	; 111
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	4d df       	rcall	.-358    	; 0x15e <lcd_string>
	
	adc_init();
 2c4:	58 df       	rcall	.-336    	; 0x176 <adc_init>
	
	while(1){
		
		for(int i=0; i<=2; i++)
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	3d c0       	rjmp	.+122    	; 0x346 <main+0xae>
		{
			adc_phase1(i);
 2cc:	ce 01       	movw	r24, r28
 2ce:	65 df       	rcall	.-310    	; 0x19a <adc_phase1>
			/*_delay_ms(1000);*/
			
			if(i==0)
 2d0:	20 97       	sbiw	r28, 0x00	; 0
 2d2:	71 f4       	brne	.+28     	; 0x2f0 <main+0x58>
			{
				lcd_clear();
 2d4:	f9 de       	rcall	.-526    	; 0xc8 <lcd_clear>
				lcd_setcursor(0,1);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	2d df       	rcall	.-422    	; 0x136 <lcd_setcursor>
				lcd_string("Phase1: ");
 2dc:	81 e8       	ldi	r24, 0x81	; 129
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	3e df       	rcall	.-388    	; 0x15e <lcd_string>
				lcd_setcursor(0,8);
 2e2:	68 e0       	ldi	r22, 0x08	; 8
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	27 df       	rcall	.-434    	; 0x136 <lcd_setcursor>
				lcd_string((const char*)buf);
 2e8:	82 ea       	ldi	r24, 0xA2	; 162
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	38 df       	rcall	.-400    	; 0x15e <lcd_string>
 2ee:	21 c0       	rjmp	.+66     	; 0x332 <main+0x9a>
			}	
			
			else if(i==1)
 2f0:	c1 30       	cpi	r28, 0x01	; 1
 2f2:	d1 05       	cpc	r29, r1
 2f4:	71 f4       	brne	.+28     	; 0x312 <main+0x7a>
			{
				lcd_clear();
 2f6:	e8 de       	rcall	.-560    	; 0xc8 <lcd_clear>
				lcd_setcursor(0,1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	1c df       	rcall	.-456    	; 0x136 <lcd_setcursor>
				lcd_string("Phase2: ");
 2fe:	8a e8       	ldi	r24, 0x8A	; 138
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2d df       	rcall	.-422    	; 0x15e <lcd_string>
				lcd_setcursor(0,8);
 304:	68 e0       	ldi	r22, 0x08	; 8
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	16 df       	rcall	.-468    	; 0x136 <lcd_setcursor>
				lcd_string((const char*)buf);
 30a:	82 ea       	ldi	r24, 0xA2	; 162
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	27 df       	rcall	.-434    	; 0x15e <lcd_string>
 310:	10 c0       	rjmp	.+32     	; 0x332 <main+0x9a>
			}
			else if(i==2)
 312:	c2 30       	cpi	r28, 0x02	; 2
 314:	d1 05       	cpc	r29, r1
 316:	e1 f4       	brne	.+56     	; 0x350 <main+0xb8>
			{
				lcd_clear();
 318:	d7 de       	rcall	.-594    	; 0xc8 <lcd_clear>
				lcd_setcursor(0,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0b df       	rcall	.-490    	; 0x136 <lcd_setcursor>
				lcd_string("Phase3: ");
 320:	83 e9       	ldi	r24, 0x93	; 147
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	1c df       	rcall	.-456    	; 0x15e <lcd_string>
				lcd_setcursor(0,8);
 326:	68 e0       	ldi	r22, 0x08	; 8
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	05 df       	rcall	.-502    	; 0x136 <lcd_setcursor>
				lcd_string((const char*)buf);
 32c:	82 ea       	ldi	r24, 0xA2	; 162
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	16 df       	rcall	.-468    	; 0x15e <lcd_string>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	84 e3       	ldi	r24, 0x34	; 52
 336:	9c e0       	ldi	r25, 0x0C	; 12
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0xa0>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xaa>
 342:	00 00       	nop
	
	adc_init();
	
	while(1){
		
		for(int i=0; i<=2; i++)
 344:	21 96       	adiw	r28, 0x01	; 1
 346:	c3 30       	cpi	r28, 0x03	; 3
 348:	d1 05       	cpc	r29, r1
 34a:	0c f4       	brge	.+2      	; 0x34e <main+0xb6>
 34c:	bf cf       	rjmp	.-130    	; 0x2cc <main+0x34>
 34e:	bb cf       	rjmp	.-138    	; 0x2c6 <main+0x2e>
				return 0;
			}
			_delay_ms(500);
		}
	}
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <__fixsfsi>:
 35a:	04 d0       	rcall	.+8      	; 0x364 <__fixunssfsi>
 35c:	68 94       	set
 35e:	b1 11       	cpse	r27, r1
 360:	8d c0       	rjmp	.+282    	; 0x47c <__fp_szero>
 362:	08 95       	ret

00000364 <__fixunssfsi>:
 364:	70 d0       	rcall	.+224    	; 0x446 <__fp_splitA>
 366:	88 f0       	brcs	.+34     	; 0x38a <__fixunssfsi+0x26>
 368:	9f 57       	subi	r25, 0x7F	; 127
 36a:	90 f0       	brcs	.+36     	; 0x390 <__fixunssfsi+0x2c>
 36c:	b9 2f       	mov	r27, r25
 36e:	99 27       	eor	r25, r25
 370:	b7 51       	subi	r27, 0x17	; 23
 372:	a0 f0       	brcs	.+40     	; 0x39c <__fixunssfsi+0x38>
 374:	d1 f0       	breq	.+52     	; 0x3aa <__fixunssfsi+0x46>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	88 1f       	adc	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	1a f0       	brmi	.+6      	; 0x386 <__fixunssfsi+0x22>
 380:	ba 95       	dec	r27
 382:	c9 f7       	brne	.-14     	; 0x376 <__fixunssfsi+0x12>
 384:	12 c0       	rjmp	.+36     	; 0x3aa <__fixunssfsi+0x46>
 386:	b1 30       	cpi	r27, 0x01	; 1
 388:	81 f0       	breq	.+32     	; 0x3aa <__fixunssfsi+0x46>
 38a:	77 d0       	rcall	.+238    	; 0x47a <__fp_zero>
 38c:	b1 e0       	ldi	r27, 0x01	; 1
 38e:	08 95       	ret
 390:	74 c0       	rjmp	.+232    	; 0x47a <__fp_zero>
 392:	67 2f       	mov	r22, r23
 394:	78 2f       	mov	r23, r24
 396:	88 27       	eor	r24, r24
 398:	b8 5f       	subi	r27, 0xF8	; 248
 39a:	39 f0       	breq	.+14     	; 0x3aa <__fixunssfsi+0x46>
 39c:	b9 3f       	cpi	r27, 0xF9	; 249
 39e:	cc f3       	brlt	.-14     	; 0x392 <__fixunssfsi+0x2e>
 3a0:	86 95       	lsr	r24
 3a2:	77 95       	ror	r23
 3a4:	67 95       	ror	r22
 3a6:	b3 95       	inc	r27
 3a8:	d9 f7       	brne	.-10     	; 0x3a0 <__fixunssfsi+0x3c>
 3aa:	3e f4       	brtc	.+14     	; 0x3ba <__fixunssfsi+0x56>
 3ac:	90 95       	com	r25
 3ae:	80 95       	com	r24
 3b0:	70 95       	com	r23
 3b2:	61 95       	neg	r22
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	08 95       	ret

000003bc <__floatunsisf>:
 3bc:	e8 94       	clt
 3be:	09 c0       	rjmp	.+18     	; 0x3d2 <__floatsisf+0x12>

000003c0 <__floatsisf>:
 3c0:	97 fb       	bst	r25, 7
 3c2:	3e f4       	brtc	.+14     	; 0x3d2 <__floatsisf+0x12>
 3c4:	90 95       	com	r25
 3c6:	80 95       	com	r24
 3c8:	70 95       	com	r23
 3ca:	61 95       	neg	r22
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	8f 4f       	sbci	r24, 0xFF	; 255
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	99 23       	and	r25, r25
 3d4:	a9 f0       	breq	.+42     	; 0x400 <__DATA_REGION_LENGTH__>
 3d6:	f9 2f       	mov	r31, r25
 3d8:	96 e9       	ldi	r25, 0x96	; 150
 3da:	bb 27       	eor	r27, r27
 3dc:	93 95       	inc	r25
 3de:	f6 95       	lsr	r31
 3e0:	87 95       	ror	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b7 95       	ror	r27
 3e8:	f1 11       	cpse	r31, r1
 3ea:	f8 cf       	rjmp	.-16     	; 0x3dc <__floatsisf+0x1c>
 3ec:	fa f4       	brpl	.+62     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 3ee:	bb 0f       	add	r27, r27
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <__floatsisf+0x36>
 3f2:	60 ff       	sbrs	r22, 0
 3f4:	1b c0       	rjmp	.+54     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 3f6:	6f 5f       	subi	r22, 0xFF	; 255
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255
 3fa:	8f 4f       	sbci	r24, 0xFF	; 255
 3fc:	9f 4f       	sbci	r25, 0xFF	; 255
 3fe:	16 c0       	rjmp	.+44     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 400:	88 23       	and	r24, r24
 402:	11 f0       	breq	.+4      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 404:	96 e9       	ldi	r25, 0x96	; 150
 406:	11 c0       	rjmp	.+34     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 408:	77 23       	and	r23, r23
 40a:	21 f0       	breq	.+8      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 40c:	9e e8       	ldi	r25, 0x8E	; 142
 40e:	87 2f       	mov	r24, r23
 410:	76 2f       	mov	r23, r22
 412:	05 c0       	rjmp	.+10     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 414:	66 23       	and	r22, r22
 416:	71 f0       	breq	.+28     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 418:	96 e8       	ldi	r25, 0x86	; 134
 41a:	86 2f       	mov	r24, r22
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	2a f0       	brmi	.+10     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 422:	9a 95       	dec	r25
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	da f7       	brpl	.-10     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 42c:	88 0f       	add	r24, r24
 42e:	96 95       	lsr	r25
 430:	87 95       	ror	r24
 432:	97 f9       	bld	r25, 7
 434:	08 95       	ret

00000436 <__fp_split3>:
 436:	57 fd       	sbrc	r21, 7
 438:	90 58       	subi	r25, 0x80	; 128
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	59 f0       	breq	.+22     	; 0x456 <__fp_splitA+0x10>
 440:	5f 3f       	cpi	r21, 0xFF	; 255
 442:	71 f0       	breq	.+28     	; 0x460 <__stack+0x1>
 444:	47 95       	ror	r20

00000446 <__fp_splitA>:
 446:	88 0f       	add	r24, r24
 448:	97 fb       	bst	r25, 7
 44a:	99 1f       	adc	r25, r25
 44c:	61 f0       	breq	.+24     	; 0x466 <__stack+0x7>
 44e:	9f 3f       	cpi	r25, 0xFF	; 255
 450:	79 f0       	breq	.+30     	; 0x470 <__stack+0x11>
 452:	87 95       	ror	r24
 454:	08 95       	ret
 456:	12 16       	cp	r1, r18
 458:	13 06       	cpc	r1, r19
 45a:	14 06       	cpc	r1, r20
 45c:	55 1f       	adc	r21, r21
 45e:	f2 cf       	rjmp	.-28     	; 0x444 <__fp_split3+0xe>
 460:	46 95       	lsr	r20
 462:	f1 df       	rcall	.-30     	; 0x446 <__fp_splitA>
 464:	08 c0       	rjmp	.+16     	; 0x476 <__stack+0x17>
 466:	16 16       	cp	r1, r22
 468:	17 06       	cpc	r1, r23
 46a:	18 06       	cpc	r1, r24
 46c:	99 1f       	adc	r25, r25
 46e:	f1 cf       	rjmp	.-30     	; 0x452 <__fp_splitA+0xc>
 470:	86 95       	lsr	r24
 472:	71 05       	cpc	r23, r1
 474:	61 05       	cpc	r22, r1
 476:	08 94       	sec
 478:	08 95       	ret

0000047a <__fp_zero>:
 47a:	e8 94       	clt

0000047c <__fp_szero>:
 47c:	bb 27       	eor	r27, r27
 47e:	66 27       	eor	r22, r22
 480:	77 27       	eor	r23, r23
 482:	cb 01       	movw	r24, r22
 484:	97 f9       	bld	r25, 7
 486:	08 95       	ret

00000488 <__mulsf3>:
 488:	0b d0       	rcall	.+22     	; 0x4a0 <__mulsf3x>
 48a:	78 c0       	rjmp	.+240    	; 0x57c <__fp_round>
 48c:	69 d0       	rcall	.+210    	; 0x560 <__fp_pscA>
 48e:	28 f0       	brcs	.+10     	; 0x49a <__mulsf3+0x12>
 490:	6e d0       	rcall	.+220    	; 0x56e <__fp_pscB>
 492:	18 f0       	brcs	.+6      	; 0x49a <__mulsf3+0x12>
 494:	95 23       	and	r25, r21
 496:	09 f0       	breq	.+2      	; 0x49a <__mulsf3+0x12>
 498:	5a c0       	rjmp	.+180    	; 0x54e <__fp_inf>
 49a:	5f c0       	rjmp	.+190    	; 0x55a <__fp_nan>
 49c:	11 24       	eor	r1, r1
 49e:	ee cf       	rjmp	.-36     	; 0x47c <__fp_szero>

000004a0 <__mulsf3x>:
 4a0:	ca df       	rcall	.-108    	; 0x436 <__fp_split3>
 4a2:	a0 f3       	brcs	.-24     	; 0x48c <__mulsf3+0x4>

000004a4 <__mulsf3_pse>:
 4a4:	95 9f       	mul	r25, r21
 4a6:	d1 f3       	breq	.-12     	; 0x49c <__mulsf3+0x14>
 4a8:	95 0f       	add	r25, r21
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	55 1f       	adc	r21, r21
 4ae:	62 9f       	mul	r22, r18
 4b0:	f0 01       	movw	r30, r0
 4b2:	72 9f       	mul	r23, r18
 4b4:	bb 27       	eor	r27, r27
 4b6:	f0 0d       	add	r31, r0
 4b8:	b1 1d       	adc	r27, r1
 4ba:	63 9f       	mul	r22, r19
 4bc:	aa 27       	eor	r26, r26
 4be:	f0 0d       	add	r31, r0
 4c0:	b1 1d       	adc	r27, r1
 4c2:	aa 1f       	adc	r26, r26
 4c4:	64 9f       	mul	r22, r20
 4c6:	66 27       	eor	r22, r22
 4c8:	b0 0d       	add	r27, r0
 4ca:	a1 1d       	adc	r26, r1
 4cc:	66 1f       	adc	r22, r22
 4ce:	82 9f       	mul	r24, r18
 4d0:	22 27       	eor	r18, r18
 4d2:	b0 0d       	add	r27, r0
 4d4:	a1 1d       	adc	r26, r1
 4d6:	62 1f       	adc	r22, r18
 4d8:	73 9f       	mul	r23, r19
 4da:	b0 0d       	add	r27, r0
 4dc:	a1 1d       	adc	r26, r1
 4de:	62 1f       	adc	r22, r18
 4e0:	83 9f       	mul	r24, r19
 4e2:	a0 0d       	add	r26, r0
 4e4:	61 1d       	adc	r22, r1
 4e6:	22 1f       	adc	r18, r18
 4e8:	74 9f       	mul	r23, r20
 4ea:	33 27       	eor	r19, r19
 4ec:	a0 0d       	add	r26, r0
 4ee:	61 1d       	adc	r22, r1
 4f0:	23 1f       	adc	r18, r19
 4f2:	84 9f       	mul	r24, r20
 4f4:	60 0d       	add	r22, r0
 4f6:	21 1d       	adc	r18, r1
 4f8:	82 2f       	mov	r24, r18
 4fa:	76 2f       	mov	r23, r22
 4fc:	6a 2f       	mov	r22, r26
 4fe:	11 24       	eor	r1, r1
 500:	9f 57       	subi	r25, 0x7F	; 127
 502:	50 40       	sbci	r21, 0x00	; 0
 504:	8a f0       	brmi	.+34     	; 0x528 <__mulsf3_pse+0x84>
 506:	e1 f0       	breq	.+56     	; 0x540 <__mulsf3_pse+0x9c>
 508:	88 23       	and	r24, r24
 50a:	4a f0       	brmi	.+18     	; 0x51e <__mulsf3_pse+0x7a>
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	bb 1f       	adc	r27, r27
 512:	66 1f       	adc	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	91 50       	subi	r25, 0x01	; 1
 51a:	50 40       	sbci	r21, 0x00	; 0
 51c:	a9 f7       	brne	.-22     	; 0x508 <__mulsf3_pse+0x64>
 51e:	9e 3f       	cpi	r25, 0xFE	; 254
 520:	51 05       	cpc	r21, r1
 522:	70 f0       	brcs	.+28     	; 0x540 <__mulsf3_pse+0x9c>
 524:	14 c0       	rjmp	.+40     	; 0x54e <__fp_inf>
 526:	aa cf       	rjmp	.-172    	; 0x47c <__fp_szero>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	ec f3       	brlt	.-6      	; 0x526 <__mulsf3_pse+0x82>
 52c:	98 3e       	cpi	r25, 0xE8	; 232
 52e:	dc f3       	brlt	.-10     	; 0x526 <__mulsf3_pse+0x82>
 530:	86 95       	lsr	r24
 532:	77 95       	ror	r23
 534:	67 95       	ror	r22
 536:	b7 95       	ror	r27
 538:	f7 95       	ror	r31
 53a:	e7 95       	ror	r30
 53c:	9f 5f       	subi	r25, 0xFF	; 255
 53e:	c1 f7       	brne	.-16     	; 0x530 <__mulsf3_pse+0x8c>
 540:	fe 2b       	or	r31, r30
 542:	88 0f       	add	r24, r24
 544:	91 1d       	adc	r25, r1
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret

0000054e <__fp_inf>:
 54e:	97 f9       	bld	r25, 7
 550:	9f 67       	ori	r25, 0x7F	; 127
 552:	80 e8       	ldi	r24, 0x80	; 128
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	08 95       	ret

0000055a <__fp_nan>:
 55a:	9f ef       	ldi	r25, 0xFF	; 255
 55c:	80 ec       	ldi	r24, 0xC0	; 192
 55e:	08 95       	ret

00000560 <__fp_pscA>:
 560:	00 24       	eor	r0, r0
 562:	0a 94       	dec	r0
 564:	16 16       	cp	r1, r22
 566:	17 06       	cpc	r1, r23
 568:	18 06       	cpc	r1, r24
 56a:	09 06       	cpc	r0, r25
 56c:	08 95       	ret

0000056e <__fp_pscB>:
 56e:	00 24       	eor	r0, r0
 570:	0a 94       	dec	r0
 572:	12 16       	cp	r1, r18
 574:	13 06       	cpc	r1, r19
 576:	14 06       	cpc	r1, r20
 578:	05 06       	cpc	r0, r21
 57a:	08 95       	ret

0000057c <__fp_round>:
 57c:	09 2e       	mov	r0, r25
 57e:	03 94       	inc	r0
 580:	00 0c       	add	r0, r0
 582:	11 f4       	brne	.+4      	; 0x588 <__fp_round+0xc>
 584:	88 23       	and	r24, r24
 586:	52 f0       	brmi	.+20     	; 0x59c <__fp_round+0x20>
 588:	bb 0f       	add	r27, r27
 58a:	40 f4       	brcc	.+16     	; 0x59c <__fp_round+0x20>
 58c:	bf 2b       	or	r27, r31
 58e:	11 f4       	brne	.+4      	; 0x594 <__fp_round+0x18>
 590:	60 ff       	sbrs	r22, 0
 592:	04 c0       	rjmp	.+8      	; 0x59c <__fp_round+0x20>
 594:	6f 5f       	subi	r22, 0xFF	; 255
 596:	7f 4f       	sbci	r23, 0xFF	; 255
 598:	8f 4f       	sbci	r24, 0xFF	; 255
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	08 95       	ret

0000059e <__itoa_ncheck>:
 59e:	bb 27       	eor	r27, r27
 5a0:	4a 30       	cpi	r20, 0x0A	; 10
 5a2:	31 f4       	brne	.+12     	; 0x5b0 <__itoa_ncheck+0x12>
 5a4:	99 23       	and	r25, r25
 5a6:	22 f4       	brpl	.+8      	; 0x5b0 <__itoa_ncheck+0x12>
 5a8:	bd e2       	ldi	r27, 0x2D	; 45
 5aa:	90 95       	com	r25
 5ac:	81 95       	neg	r24
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <__utoa_common>

000005b2 <__utoa_ncheck>:
 5b2:	bb 27       	eor	r27, r27

000005b4 <__utoa_common>:
 5b4:	fb 01       	movw	r30, r22
 5b6:	55 27       	eor	r21, r21
 5b8:	aa 27       	eor	r26, r26
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	aa 1f       	adc	r26, r26
 5c0:	a4 17       	cp	r26, r20
 5c2:	10 f0       	brcs	.+4      	; 0x5c8 <__utoa_common+0x14>
 5c4:	a4 1b       	sub	r26, r20
 5c6:	83 95       	inc	r24
 5c8:	50 51       	subi	r21, 0x10	; 16
 5ca:	b9 f7       	brne	.-18     	; 0x5ba <__utoa_common+0x6>
 5cc:	a0 5d       	subi	r26, 0xD0	; 208
 5ce:	aa 33       	cpi	r26, 0x3A	; 58
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__utoa_common+0x20>
 5d2:	a9 5d       	subi	r26, 0xD9	; 217
 5d4:	a1 93       	st	Z+, r26
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	79 f7       	brne	.-34     	; 0x5b8 <__utoa_common+0x4>
 5da:	b1 11       	cpse	r27, r1
 5dc:	b1 93       	st	Z+, r27
 5de:	11 92       	st	Z+, r1
 5e0:	cb 01       	movw	r24, r22
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <strrev>

000005e4 <strrev>:
 5e4:	dc 01       	movw	r26, r24
 5e6:	fc 01       	movw	r30, r24
 5e8:	67 2f       	mov	r22, r23
 5ea:	71 91       	ld	r23, Z+
 5ec:	77 23       	and	r23, r23
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <strrev+0x4>
 5f0:	32 97       	sbiw	r30, 0x02	; 2
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <strrev+0x18>
 5f4:	7c 91       	ld	r23, X
 5f6:	6d 93       	st	X+, r22
 5f8:	70 83       	st	Z, r23
 5fa:	62 91       	ld	r22, -Z
 5fc:	ae 17       	cp	r26, r30
 5fe:	bf 07       	cpc	r27, r31
 600:	c8 f3       	brcs	.-14     	; 0x5f4 <strrev+0x10>
 602:	08 95       	ret

00000604 <_exit>:
 604:	f8 94       	cli

00000606 <__stop_program>:
 606:	ff cf       	rjmp	.-2      	; 0x606 <__stop_program>
